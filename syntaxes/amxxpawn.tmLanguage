<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>fileTypes</key>
    <array>
        <string>sma</string>
        <string>inc</string>
    </array>
    <key>foldingStartMarker</key>
    <string>(?x)
         /\*\*(?!\*)
        |^(?![^{]*?//|[^{]*?/\*(?!.*?\*/.*?\{)).*?\{\s*($|//|/\*(?!.*?\*/.*\S))
    </string>
    <key>foldingStopMarker</key>
    <string>(?&lt;!\*)\*\*/|^\s*\}</string>
    <key>name</key>
    <string>AMXXPawn</string>
    <key>patterns</key>
    <array>
        <dict>
            <key>include</key>
            <string>#preprocessor-rule-enabled</string>
        </dict>
        <dict>
            <key>include</key>
            <string>#preprocessor-rule-disabled</string>
        </dict>
        <dict>
            <key>include</key>
            <string>#preprocessor-rule-other</string>
        </dict>
        <dict>
            <key>include</key>
            <string>#comments</string>
        </dict>
        <dict>
            <key>match</key>
            <string>(?x)
                (default)\s*:|                                          #ignore "default:"
                \?(?!.*\().*?(?'ident'[A-Za-z_@][A-Za-z0-9_@]*+)\s*:|   #ignore "? identifier :"
                (case)\s+(\g'ident')\s*:|                               #ignore "case identifier:"
                :\s*\g'ident'\s*|                                       #ignore ":identifier:"
                (
                    {(?:\s*\g'ident'\s*(?:\,)?)+}\s*:|                  #a list of tags or
                    \b\g'ident'\s*:                                     #a single tag
                )
            </string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.amxxpawn</string>
                </dict>
                <key>3</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.amxxpawn</string>
                </dict>
                <key>4</key>
                <dict>
                    <key>name</key>
                    <string>constant.other.amxxpawn</string>
                </dict>
                <key>5</key>
                <dict>
                    <key>name</key>
                    <string>storage.type.amxxpawn</string>
                </dict>
            </dict>
        </dict>
        <dict>
            <key>match</key>
            <string>\b(break|case|continue|default|do|else|for|goto|if|return|switch|while)\b</string>
            <key>name</key>
            <string>keyword.control.amxxpawn</string>
        </dict>
        <dict>
            <key>match</key>
            <string>(enum)\s+((?:_:\s*)?[A-Za-z_@][A-Za-z0-9_@]*)?</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>entity.name.type.amxxpawn</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>storage.type.amxxpawn</string>
                </dict>
            </dict>
        </dict>
        <dict>
            <key>match</key>
            <string>\b(const|static|stock|public|new|native|forward)\b</string>
            <key>name</key>
            <string>storage.modifier.amxxpawn</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\b(true|false|__DATE__|__TIME__|__LINE__|__FILE__|__BINARY_PATH__|__BINARY_NAME__|__BINARY__|cellbits|cellmax|cellmin|__Pawn|debug)\b</string>
            <key>name</key>
            <string>constant.language.amxxpawn</string>
        </dict>
        <dict>
            <key>include</key>
            <string>#sizeof</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\b((0(x|X)[0-9a-fA-F]*)|([0-9]+\.?[0-9]*))\b</string>
            <key>name</key>
            <string>constant.numeric.amxxpawn</string>
        </dict>
        <dict>
            <key>begin</key>
            <string>"</string>
            <key>beginCaptures</key>
            <dict>
                <key>0</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.string.begin.amxxpawn</string>
                </dict>
            </dict>
            <key>end</key>
            <string>"</string>
            <key>endCaptures</key>
            <dict>
                <key>0</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.string.end.amxxpawn</string>
                </dict>
            </dict>
            <key>name</key>
            <string>string.quoted.double.amxxpawn</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#string_escaped_char</string>
                </dict>
            </array>
        </dict>
        <dict>
            <key>begin</key>
            <string>'</string>
            <key>beginCaptures</key>
            <dict>
                <key>0</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.string.begin.amxxpawn</string>
                </dict>
            </dict>
            <key>end</key>
            <string>'</string>
            <key>endCaptures</key>
            <dict>
                <key>0</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.string.end.amxxpawn</string>
                </dict>
            </dict>
            <key>name</key>
            <string>string.quoted.single.amxxpawn</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#string_escaped_char</string>
                </dict>
            </array>
        </dict>
        <dict>
            <key>begin</key>
            <string>(?x)
                ^\s*\#\s*(define)\s+             # define
                ((?&lt;id&gt;[a-zA-Z_][a-zA-Z0-9_]*))  # macro name
                (?:                              # and optionally:
                    (\()                         # an open parenthesis
                        (
                            \s* \g&lt;id&gt; \s*       # first argument
                            ((,) \s* \g&lt;id&gt; \s*)*  # additional arguments
                            (?:\.\.\.)?          # varargs ellipsis?
                        )
                    (\))                         # a close parenthesis
                )?
            </string>
            <key>beginCaptures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.define.amxxpawn</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>entity.name.function.preprocessor.amxxpawn</string>
                </dict>
                <key>4</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.parameters.amxxpawn</string>
                </dict>
                <key>5</key>
                <dict>
                    <key>name</key>
                    <string>variable.parameter.preprocessor.amxxpawn</string>
                </dict>
                <key>7</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.separator.parameters.amxxpawn</string>
                </dict>
                <key>8</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.parameters.amxxpawn</string>
                </dict>
            </dict>
            <key>end</key>
            <string>(?=(?://|/\*))|$</string>
            <key>name</key>
            <string>meta.preprocessor.macro.amxxpawn</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>match</key>
                    <string>(?&gt;\\\s*\n)</string>
                    <key>name</key>
                    <string>punctuation.separator.continuation.amxxpawn</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>$base</string>
                </dict>
            </array>
        </dict>
        <dict>
            <key>begin</key>
            <string>^\s*#\s*(error)\b</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.error.amxxpawn</string>
                </dict>
            </dict>
            <key>end</key>
            <string>$</string>
            <key>name</key>
            <string>meta.preprocessor.diagnostic.amxxpawn</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>match</key>
                    <string>(?&gt;\\\s*\n)</string>
                    <key>name</key>
                    <string>punctuation.separator.continuation.amxxpawn</string>
                </dict>
            </array>
        </dict>
        <dict>
            <key>begin</key>
            <string>^\s*#\s*((?:try)?include)\b\s+</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.include.amxxpawn</string>
                </dict>
            </dict>
            <key>end</key>
            <string>(?=(?://|/\*))|$</string>
            <key>name</key>
            <string>meta.preprocessor.amxxpawn.include</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>match</key>
                    <string>(?&gt;\\\s*\n)</string>
                    <key>name</key>
                    <string>punctuation.separator.continuation.amxxpawn</string>
                </dict>
                <dict>
                    <key>begin</key>
                    <string>"</string>
                    <key>beginCaptures</key>
                    <dict>
                        <key>0</key>
                        <dict>
                            <key>name</key>
                            <string>punctuation.definition.string.begin.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>end</key>
                    <string>"</string>
                    <key>endCaptures</key>
                    <dict>
                        <key>0</key>
                        <dict>
                            <key>name</key>
                            <string>punctuation.definition.string.end.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>name</key>
                    <string>string.quoted.double.include.amxxpawn</string>
                </dict>
                <dict>
                    <key>begin</key>
                    <string>&lt;</string>
                    <key>beginCaptures</key>
                    <dict>
                        <key>0</key>
                        <dict>
                            <key>name</key>
                            <string>punctuation.definition.string.begin.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>end</key>
                    <string>&gt;</string>
                    <key>endCaptures</key>
                    <dict>
                        <key>0</key>
                        <dict>
                            <key>name</key>
                            <string>punctuation.definition.string.end.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>name</key>
                    <string>string.quoted.other.lt-gt.include.amxxpawn</string>
                </dict>
            </array>
        </dict>
        <dict>
            <key>include</key>
            <string>#pragma-mark</string>
        </dict>
        <dict>
            <key>begin</key>
            <string>^\s*#\s*(define|defined|elseif|else|if|pragma|undef|endinput|error|warning)\b</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.amxxpawn</string>
                </dict>
            </dict>
            <key>end</key>
            <string>(?=(?://|/\*))|$</string>
            <key>name</key>
            <string>meta.preprocessor.amxxpawn</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>match</key>
                    <string>(?&gt;\\\s*\n)</string>
                    <key>name</key>
                    <string>punctuation.separator.continuation.amxxpawn</string>
                </dict>
            </array>
        </dict>
        <dict>
            <key>include</key>
            <string>#block</string>
        </dict>
        <dict>
            <key>begin</key>
            <string>(?x)
            (?:  ^                                 # begin-of-line
              |
                 (?: (?= \s )           (?&lt;!else|new|return) (?&lt;=\w)      #  or word + space before name
                   | (?= \s*[A-Za-z_] ) (?&lt;!&amp;&amp;)       (?&lt;=[*&amp;&gt;])   #  or type modifier before name
                 )
            )
            (\s*) (?!(?:while|for|do|if|else|switch|return)\s*\()
            (?:
                ((?: [A-Za-z_@][A-Za-z0-9_@]*+ )++\s*:\s*)?        # Tag
                (
                    (?: [A-Za-z_@][A-Za-z0-9_@]*+ )++ |                  # actual name
                    (?: (?&lt;=operator) (?: [-*&amp;&lt;&gt;=+!]+ | \(\) | \[\] ) )  # if it is a C++ operator
                )
            )
             \s*(?=\()</string>
            <key>beginCaptures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.whitespace.function.leading.amxxpawn</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>storage.type.amxxpawn</string>
                </dict>
                <key>3</key>
                <dict>
                    <key>name</key>
                    <string>entity.name.function.amxxpawn</string>
                </dict>
                <key>4</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.parameters.amxxpawn</string>
                </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;=\})|(?=#)|(;)</string>
            <key>name</key>
            <string>meta.function.amxxpawn</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#comments</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#parens</string>
                </dict>
                <dict>
                    <key>match</key>
                    <string>\bconst\b</string>
                    <key>name</key>
                    <string>storage.modifier.amxxpawn</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#block</string>
                </dict>
            </array>
        </dict>
    </array>
    <key>repository</key>
    <dict>
        <key>block</key>
        <dict>
            <key>begin</key>
            <string>\{</string>
            <key>end</key>
            <string>\}</string>
            <key>name</key>
            <string>meta.block.amxxpawn</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#block_innards</string>
                </dict>
            </array>
        </dict>
        <key>block_innards</key>
        <dict>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#preprocessor-rule-enabled-block</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#preprocessor-rule-disabled-block</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#preprocessor-rule-other-block</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#sizeof</string>
                </dict>
                <dict>
                    <key>captures</key>
                    <dict>
                        <key>1</key>
                        <dict>
                            <key>name</key>
                            <string>punctuation.whitespace.function-call.leading.amxxpawn</string>
                        </dict>
                        <key>2</key>
                        <dict>
                            <key>name</key>
                            <string>support.function.any-method.amxxpawn</string>
                        </dict>
                        <key>3</key>
                        <dict>
                            <key>name</key>
                            <string>punctuation.definition.parameters.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>match</key>
                    <string>(?x) (?: (?= \s )  (?:(?&lt;=else|new|return) | (?&lt;!\w)) (\s+))?
            ((?:@)?\b
                (?!(while|for|do|if|else|switch|return)\s*\()(?:[A-Za-z_][A-Za-z0-9_@]*+\b)++                  # actual name
            )
             \s*(\()</string>
                    <key>name</key>
                    <string>meta.function-call.amxxpawn</string>
                </dict>
                <dict>
                    <key>captures</key>
                    <dict>
                        <key>1</key>
                        <dict>
                            <key>name</key>
                            <string>variable.other.amxxpawn</string>
                        </dict>
                        <key>2</key>
                        <dict>
                            <key>name</key>
                            <string>punctuation.definition.parameters.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>match</key>
                    <string>(?x)
                    (?x)
            (?:
                 (?: (?= \s )           (?&lt;!else|new|return) (?&lt;=\w)\s+      #  or word + space before name
                 )
            )
            (
                (?: [A-Za-z_][A-Za-z0-9_]*+ )++    |              # actual name
                (?: (?&lt;=operator) (?: [-*&amp;&lt;&gt;=+!]+ | \(\) | \[\] ) )?  # if it is a C++ operator
            )
             \s*(\()</string>
                    <key>name</key>
                    <string>meta.initialization.amxxpawn</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#block</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>$base</string>
                </dict>
            </array>
        </dict>
        <key>comments</key>
        <dict>
            <key>patterns</key>
            <array>
                <dict>
                    <key>captures</key>
                    <dict>
                        <key>1</key>
                        <dict>
                            <key>name</key>
                            <string>meta.toc-list.banner.block.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>match</key>
                    <string>^/\* =(\s*.*?)\s*= \*/$\n?</string>
                    <key>name</key>
                    <string>comment.block.amxxpawn</string>
                </dict>
                <dict>
                    <key>begin</key>
                    <string>(^|.)(?=/\*\*)</string>
                    <key>captures</key>
                    <dict>
                        <key>0</key>
                        <dict>
                            <key>name</key>
                            <string>punctuation.definition.comment.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>end</key>
                    <string>(?<=\*/)(.|$)</string>
                    <key>name</key>
                    <string>comment.block.doc.amxxpawn</string>
                    <key>patterns</key>
                    <array>
                        <dict>
                            <key>include</key>
                            <string>text.pawndoc</string>
                        </dict>
                    </array>
                </dict>
                <dict>
                    <key>begin</key>
                    <string>/\*</string>
                    <key>captures</key>
                    <dict>
                        <key>0</key>
                        <dict>
                            <key>name</key>
                            <string>punctuation.definition.comment.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>end</key>
                    <string>\*/</string>
                    <key>name</key>
                    <string>comment.block.amxxpawn</string>
                </dict>
                <dict>
                    <key>match</key>
                    <string>\*/.*\n</string>
                    <key>name</key>
                    <string>invalid.illegal.stray-comment-end.amxxpawn</string>
                </dict>
                <dict>
                    <key>captures</key>
                    <dict>
                        <key>1</key>
                        <dict>
                            <key>name</key>
                            <string>meta.toc-list.banner.line.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>match</key>
                    <string>^// =(\s*.*?)\s*=\s*$\n?</string>
                    <key>name</key>
                    <string>comment.line.banner.c++</string>
                </dict>
                <dict>
                    <key>begin</key>
                    <string>//</string>
                    <key>beginCaptures</key>
                    <dict>
                        <key>0</key>
                        <dict>
                            <key>name</key>
                            <string>punctuation.definition.comment.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>end</key>
                    <string>$\n?</string>
                    <key>name</key>
                    <string>comment.line.double-slash.c++</string>
                    <key>patterns</key>
                    <array>
                        <dict>
                            <key>match</key>
                            <string>(?&gt;\\\s*\n)</string>
                            <key>name</key>
                            <string>punctuation.separator.continuation.c++</string>
                        </dict>
                    </array>
                </dict>
            </array>
        </dict>
        <key>disabled</key>
        <dict>
            <key>begin</key>
            <string>^\s*#\s*if(n?def)?\b.*$</string>
            <key>comment</key>
            <string>eat nested preprocessor if(def)s</string>
            <key>end</key>
            <string>^\s*#\s*endif\b.*$</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#disabled</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#pragma-mark</string>
                </dict>
            </array>
        </dict>
        <key>parens</key>
        <dict>
            <key>begin</key>
            <string>\(</string>
            <key>end</key>
            <string>\)</string>
            <key>name</key>
            <string>meta.parens.amxxpawn</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>$base</string>
                </dict>
            </array>
        </dict>
        <key>pragma-mark</key>
        <dict>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>meta.preprocessor.amxxpawn</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.pragma.amxxpawn</string>
                </dict>
                <key>3</key>
                <dict>
                    <key>name</key>
                    <string>meta.toc-list.pragma-mark.amxxpawn</string>
                </dict>
            </dict>
            <key>match</key>
            <string>^\s*(#\s*(pragma\s+mark)\s+(.*))</string>
            <key>name</key>
            <string>meta.section</string>
        </dict>
        <key>preprocessor-rule-disabled</key>
        <dict>
            <key>begin</key>
            <string>^\s*(#(if)\s+(0)\b).*</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>meta.preprocessor.amxxpawn</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.if.amxxpawn</string>
                </dict>
                <key>3</key>
                <dict>
                    <key>name</key>
                    <string>constant.numeric.preprocessor.amxxpawn</string>
                </dict>
            </dict>
            <key>end</key>
            <string>^\s*(#\s*(endif)\b)</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>begin</key>
                    <string>^\s*(#\s*(else)\b)</string>
                    <key>captures</key>
                    <dict>
                        <key>1</key>
                        <dict>
                            <key>name</key>
                            <string>meta.preprocessor.amxxpawn</string>
                        </dict>
                        <key>2</key>
                        <dict>
                            <key>name</key>
                            <string>keyword.control.import.else.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>end</key>
                    <string>(?=^\s*#\s*endif\b.*$)</string>
                    <key>patterns</key>
                    <array>
                        <dict>
                            <key>include</key>
                            <string>$base</string>
                        </dict>
                    </array>
                </dict>
                <dict>
                    <key>begin</key>
                    <string></string>
                    <key>end</key>
                    <string>(?=^\s*#\s*(else|endif)\b.*$)</string>
                    <key>name</key>
                    <string>comment.block.preprocessor.if-branch</string>
                    <key>patterns</key>
                    <array>
                        <dict>
                            <key>include</key>
                            <string>#disabled</string>
                        </dict>
                        <dict>
                            <key>include</key>
                            <string>#pragma-mark</string>
                        </dict>
                    </array>
                </dict>
            </array>
        </dict>
        <key>preprocessor-rule-disabled-block</key>
        <dict>
            <key>begin</key>
            <string>^\s*(#(if)\s+(0)\b).*</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>meta.preprocessor.amxxpawn</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.if.amxxpawn</string>
                </dict>
                <key>3</key>
                <dict>
                    <key>name</key>
                    <string>constant.numeric.preprocessor.amxxpawn</string>
                </dict>
            </dict>
            <key>end</key>
            <string>^\s*(#\s*(endif)\b)</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>begin</key>
                    <string>^\s*(#\s*(else)\b)</string>
                    <key>captures</key>
                    <dict>
                        <key>1</key>
                        <dict>
                            <key>name</key>
                            <string>meta.preprocessor.amxxpawn</string>
                        </dict>
                        <key>2</key>
                        <dict>
                            <key>name</key>
                            <string>keyword.control.import.else.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>end</key>
                    <string>(?=^\s*#\s*endif\b.*$)</string>
                    <key>patterns</key>
                    <array>
                        <dict>
                            <key>include</key>
                            <string>#block_innards</string>
                        </dict>
                    </array>
                </dict>
                <dict>
                    <key>begin</key>
                    <string></string>
                    <key>end</key>
                    <string>(?=^\s*#\s*(else|endif)\b.*$)</string>
                    <key>name</key>
                    <string>comment.block.preprocessor.if-branch.in-block</string>
                    <key>patterns</key>
                    <array>
                        <dict>
                            <key>include</key>
                            <string>#disabled</string>
                        </dict>
                        <dict>
                            <key>include</key>
                            <string>#pragma-mark</string>
                        </dict>
                    </array>
                </dict>
            </array>
        </dict>
        <key>preprocessor-rule-enabled</key>
        <dict>
            <key>begin</key>
            <string>^\s*(#(if)\s+(0*1)\b)</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>meta.preprocessor.amxxpawn</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.if.amxxpawn</string>
                </dict>
                <key>3</key>
                <dict>
                    <key>name</key>
                    <string>constant.numeric.preprocessor.amxxpawn</string>
                </dict>
            </dict>
            <key>end</key>
            <string>^\s*(#\s*(endif)\b)</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>begin</key>
                    <string>^\s*(#\s*(else)\b).*</string>
                    <key>captures</key>
                    <dict>
                        <key>1</key>
                        <dict>
                            <key>name</key>
                            <string>meta.preprocessor.amxxpawn</string>
                        </dict>
                        <key>2</key>
                        <dict>
                            <key>name</key>
                            <string>keyword.control.import.else.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>contentName</key>
                    <string>comment.block.preprocessor.else-branch</string>
                    <key>end</key>
                    <string>(?=^\s*#\s*endif\b.*$)</string>
                    <key>patterns</key>
                    <array>
                        <dict>
                            <key>include</key>
                            <string>#disabled</string>
                        </dict>
                        <dict>
                            <key>include</key>
                            <string>#pragma-mark</string>
                        </dict>
                    </array>
                </dict>
                <dict>
                    <key>begin</key>
                    <string></string>
                    <key>end</key>
                    <string>(?=^\s*#\s*(else|endif)\b.*$)</string>
                    <key>patterns</key>
                    <array>
                        <dict>
                            <key>include</key>
                            <string>$base</string>
                        </dict>
                    </array>
                </dict>
            </array>
        </dict>
        <key>preprocessor-rule-enabled-block</key>
        <dict>
            <key>begin</key>
            <string>^\s*(#(if)\s+(0*1)\b)</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>meta.preprocessor.amxxpawn</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.if.amxxpawn</string>
                </dict>
                <key>3</key>
                <dict>
                    <key>name</key>
                    <string>constant.numeric.preprocessor.amxxpawn</string>
                </dict>
            </dict>
            <key>end</key>
            <string>^\s*(#\s*(endif)\b)</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>begin</key>
                    <string>^\s*(#\s*(else)\b).*</string>
                    <key>captures</key>
                    <dict>
                        <key>1</key>
                        <dict>
                            <key>name</key>
                            <string>meta.preprocessor.amxxpawn</string>
                        </dict>
                        <key>2</key>
                        <dict>
                            <key>name</key>
                            <string>keyword.control.import.else.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>contentName</key>
                    <string>comment.block.preprocessor.else-branch.in-block</string>
                    <key>end</key>
                    <string>(?=^\s*#\s*endif\b.*$)</string>
                    <key>patterns</key>
                    <array>
                        <dict>
                            <key>include</key>
                            <string>#disabled</string>
                        </dict>
                        <dict>
                            <key>include</key>
                            <string>#pragma-mark</string>
                        </dict>
                    </array>
                </dict>
                <dict>
                    <key>begin</key>
                    <string></string>
                    <key>end</key>
                    <string>(?=^\s*#\s*(else|endif)\b.*$)</string>
                    <key>patterns</key>
                    <array>
                        <dict>
                            <key>include</key>
                            <string>#block_innards</string>
                        </dict>
                    </array>
                </dict>
            </array>
        </dict>
        <key>preprocessor-rule-other</key>
        <dict>
            <key>begin</key>
            <string>^\s*(#\s*(if(n?def)?)\b.*?(?:(?=(?://|/\*))|$))</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>meta.preprocessor.amxxpawn</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.amxxpawn</string>
                </dict>
            </dict>
            <key>end</key>
            <string>^\s*(#\s*(endif)\b).*$</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>$base</string>
                </dict>
            </array>
        </dict>
        <key>preprocessor-rule-other-block</key>
        <dict>
            <key>begin</key>
            <string>^\s*(#\s*(if(n?def)?)\b.*?(?:(?=(?://|/\*))|$))</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>meta.preprocessor.amxxpawn</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.amxxpawn</string>
                </dict>
            </dict>
            <key>end</key>
            <string>^\s*(#\s*(endif)\b).*$</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#block_innards</string>
                </dict>
            </array>
        </dict>
        <key>sizeof</key>
        <dict>
            <key>match</key>
            <string>\b(sizeof)\b</string>
            <key>name</key>
            <string>keyword.operator.sizeof.amxxpawn</string>
        </dict>
        <key>string_escaped_char</key>
        <dict>
            <key>patterns</key>
            <array>
                <dict>
                    <key>match</key>
                    <string>\^(\^|[abefnprtv'"?]|[0-3]\d{,2}|[4-7]\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8})</string>
                    <key>name</key>
                    <string>constant.character.escape.amxxpawn</string>
                </dict>
                <dict>
                    <key>match</key>
                    <string>\^.</string>
                    <key>name</key>
                    <string>invalid.illegal.unknown-escape.amxxpawn</string>
                </dict>
            </array>
        </dict>
    </dict>
    <key>scopeName</key>
    <string>source.amxxpawn</string>
    <key>uuid</key>
    <string>B311E234-7BCD-4821-8455-4A1D8487E654</string>
</dict>
</plist>
